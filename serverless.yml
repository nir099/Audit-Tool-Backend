service:
  name: AuditToolBackend

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true

plugins:
  - serverless-dotenv-plugin
  - serverless-webpack
  - serverless-offline

provider:
  name: aws
  runtime: nodejs12.x
  region: ap-south-1
  stage: ${opt:stage, 'dev'}
  timeout: 12
  environment:
    NODE_ENV: ${env:NODE_ENV}
    DB_NAME: ${env:DB_NAME}
    DB_USER: ${env:DB_USER}
    DB_PASSWORD: ${env:DB_PASSWORD}
    DB_HOST: ${env:DB_HOST}
    DB_PORT: ${env:DB_PORT}

functions:
  product:
    handler: src/startup.enrtyPoint
    events:
      - http:
          method: get
          # get products by user id
          path: products/user/{id}
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: get
          path: products/{id}
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: get
          path: products/{id}/phases
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: get
          # return the product by product_phase_id
          path: products/productPhases/{id}
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: get
          path: productPhase/{id}/knowledgeAreas
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: get
          path: knowledgeAreas/{id}/questions
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: get
          path: product/{id}/questions/{qid}/evidence
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: post
          path: question/{id}/evidence
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: post
          path: authTrigger/user
      - http:
          method: put
          path: question/{id}/evidence/{eid}
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
      - http:
          method: get
          path: user/email/{id}
      - http:
          method: get
          path: user/product/{id}
          integration: lambda
          authorizer:
            name: authorizer
            arn: ${env:ARN}
  auth-token-trigger:
    handler: src/functions/auth-token-trigger.authToken
